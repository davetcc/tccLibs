/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "ControlAppOledEncoderPico_menu.h"
#include "../ThemeMonoBordered.h"
#include <Fonts/Org_01.h>

// Global variable declarations
const  ConnectorLocalInfo applicationInfo = { "ControlAppOledEncoderPico", "3acc6301-dadd-4730-b142-9541180d2aa8" };

AdafruitSSD1306Spi* gfx;
AdafruitDrawable gfxDrawable;
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
const FloatMenuInfo minfoA0Level = { "A0 Level", 9, 0xffff, 3, NO_CALLBACK };
FloatMenuItem menuA0Level(&minfoA0Level, 0.0, nullptr, INFO_LOCATION_PGM);
const char enumStrState_0[] = "Standby";
const char enumStrState_1[] = "Warm Up";
const char enumStrState_2[] = "Active";
const char enumStrState_3[] = "Protect";
const char enumStrState_4[] = "Overheat";
const char* const enumStrState[]  = { enumStrState_0, enumStrState_1, enumStrState_2, enumStrState_3, enumStrState_4 };
const EnumMenuInfo minfoState = { "State", 8, 0xffff, 4, NO_CALLBACK, enumStrState };
EnumMenuItem menuState(&minfoState, 0, &menuA0Level, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoRightVU = { "RightVU", 7, 0xffff, 250, NO_CALLBACK, -200, 10, "dB" };
AnalogMenuItem menuRightVU(&minfoRightVU, 0, &menuState, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoLeftVU = { "Left VU", 6, 0xffff, 250, NO_CALLBACK, -200, 10, "dB" };
AnalogMenuItem menuLeftVU(&minfoLeftVU, 0, &menuRightVU, INFO_LOCATION_PGM);
const SubMenuInfo minfoStatus = { "Status", 5, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackStatus(&minfoStatus, &menuLeftVU, INFO_LOCATION_PGM);
SubMenuItem menuStatus(&minfoStatus, &menuBackStatus, nullptr, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoDirect = { "Direct", 4, 0xffff, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuDirect(&minfoDirect, false, &menuStatus, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoMute = { "Mute", 3, 0xffff, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuMute(&minfoMute, false, &menuDirect, INFO_LOCATION_PGM);
const char enumStrChannel_0[] = "Phono";
const char enumStrChannel_1[] = "CD";
const char enumStrChannel_2[] = "Aux";
const char* const enumStrChannel[]  = { enumStrChannel_0, enumStrChannel_1, enumStrChannel_2 };
const EnumMenuInfo minfoChannel = { "Channel", 2, 0xffff, 2, NO_CALLBACK, enumStrChannel };
EnumMenuItem menuChannel(&minfoChannel, 0, &menuMute, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoVolume = { "Volume", 1, 0xffff, 255, onVolumeChanged, -180, 2, "dB" };
AnalogMenuItem menuVolume(&minfoVolume, 0, &menuChannel, INFO_LOCATION_PGM);

#include "StdioTransport.h"
NoInitialisationNeeded serialInitializer;
TcMenuRemoteServer remoteServer(applicationInfo);
StdioTransport stdioTransport(255);
TagValueRemoteServerConnection serialConnection(stdioTransport, serialInitializer);


void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(true);
    // Now add any readonly, non-remote and visible flags.
    menuA0Level.setReadOnly(true);
    menuRightVU.setReadOnly(true);
    menuState.setReadOnly(true);
    menuLeftVU.setReadOnly(true);

    // Code generated by plugins and new operators.
    gfx = new AdafruitSSD1306Spi(SPIWithSettings(spi_default, 15, 10000000), 14, 13, 64, 128, ENCMODE_UTF8, SSD_1306);
    gfx->setRotation(0);
    gfx->begin();
    renderer.setUpdatesPerSecond(10);
    gfxDrawable.setGraphics(gfx);
    gfxDrawable.setFontHandler(gfx->getFontHandler());
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForEncoder(&renderer, &menuVolume, 16, 17, 21);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(false);
    renderer.enableTcUnicode();
    installMonoBorderedTheme(renderer, MenuFontDef(&Org_01, 1), MenuFontDef(&Org_01, 1), true);
    remoteServer.addConnection(&serialConnection);
}

