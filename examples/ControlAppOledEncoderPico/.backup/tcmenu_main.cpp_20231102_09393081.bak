#include "ControlAppOledEncoderPico_menu.h"
#include "PlatformDeterminationWire.h"
#include <PlatformDetermination.h>
#include <TaskManagerIO.h>
#include <hardware/i2c.h>
#include "tcMenuVersion.h"

#define OLED_SPI_TX_PIN 3
#define OLED_SPI_RX_PIN 4
#define OLED_SPI_CLK_PIN 2

void setup() {
    // prepare the I2C bus before setting up the menu
//    i2c_init(i2c_default, 400 * 1000);
//    gpio_set_function(PICO_DEFAULT_I2C_SDA_PIN, GPIO_FUNC_I2C);
//    gpio_set_function(PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C);
//    gpio_pull_up(PICO_DEFAULT_I2C_SDA_PIN);
//    gpio_pull_up(PICO_DEFAULT_I2C_SCL_PIN);
//    ioaWireBegin(i2c_default);

    // prepare the SPI bus before setting up the menu
    spi_init(spi_default, SPI_TEN_MHZ);
    gpio_set_function(OLED_SPI_CLK_PIN, GPIO_FUNC_SPI);
    gpio_set_function(OLED_SPI_TX_PIN, GPIO_FUNC_SPI);
    gpio_set_function(OLED_SPI_RX_PIN, GPIO_FUNC_SPI);

    internalAnalogDevice().initPin(ADC_PICO_FIRST_OFFSET, DIR_IN);

    // now prepare logging
    IOLOG_START_SERIAL

    setupMenu();

    setTitlePressedCallback([](int) {
        showVersionDialog(&applicationInfo);
    });

    taskManager.schedule(repeatMillis(250), [] {
        menuA0Level.setFloatValue(internalAnalogDevice().getCurrentFloat(ADC_PICO_FIRST_OFFSET));
    });
}

int main() {
    setup();
    while(1) {
        taskManager.rpiSleepingRunLoop();
    }
}
